spring.application.name=kafka-streams-spring-cloud-stream-tp1
server.port=8080
# consumer

# CETTE ligne  configure un binding (pont) nommé pageEventConsumer-in-0 qui connecte le
# Consumer<PageEvent> (le bean pageEventConsumer) au topic Kafka T1 (le consumer
# pageEventConsumer fait subscribe vers destination T1. Lorsqu?un message arrive
# dans T1, Spring Cloud Stream utilise ce binding pour récupérer le message et l?envoyer au
# consumer, qui l?affiche dans la console. Le -in-0 est une convention de nommage indiquant
# que ce binding est une entrée (input) pour le consumer, le 0 précisant qu?il s?agit de la
# première entrée configurée pour ce consumer.
spring.cloud.stream.bindings.pageEventConsumer-in-0.destination=T1

#Cette propriété indique à Spring Cloud Stream quelle fonction (ou bean) doit être utilisée
# comme point d'entrée pour le traitement des messages. Ici, elle référence le bean
# pageEventConsumer défini dans la classe PageEventHandler.
spring.cloud.function.definition=pageEventConsumer;pageEventSupplier;kStreamFunction

# pour la configuration du suplier
# ajouter pageEventConsumer dans spring.cloud.function.definition=pageEventConsumer;pageEventSupplier
spring.cloud.stream.bindings.pageEventSupplier-out-0.destination=T2
spring.cloud.stream.bindings.pageEventSupplier-out-0.producer.poller.fixed-delay=200

# Real-time processing
# ajouter pageEventConsumer dans spring.cloud.function.definition=pageEventConsumer;pageEventSupplier;kStreamFunction
spring.cloud.stream.bindings.kStreamFunction-in-0.destination=T2
spring.cloud.stream.bindings.kStreamFunction-out-0.destination=T4
# définir le temps avant de faire comit vers  T4 au lieu de default chaque 30s
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000

